{"version":3,"file":"main.1a52bba371972ace71e8.bundle.js","sources":["webpack:///./src/react-move-example.js"],"sourcesContent":["import React, { Component } from 'react'\nimport NodeGroup from 'react-move/NodeGroup'\nimport Animate from 'react-move/Animate'\nimport { easeElastic } from 'd3-ease'\nimport animationTimings from './common/animationTimings'\n\nclass TransitionGrid extends Component {\n  render() {\n    const { visible, items, removeItem } = this.props\n\n    return (\n      <Animate\n        show={visible}\n        start={{\n          // values have to be in an array for some reason or else they won't tween (?)\n          translateX: [-100],\n          opacity: [1]\n        }}\n        enter={[\n          {\n            opacity: [1],\n            timing: { duration: animationTimings.gridEnter }\n          },\n          {\n            translateX: [0],\n            timing: { duration: animationTimings.gridEnter, ease: easeElastic }\n          }\n        ]}\n        leave={[\n          {\n            opacity: [0]\n          },\n          {\n            translateX: [1000],\n            timing: { duration: animationTimings.gridLeave, ease: easeElastic }\n          }\n        ]}\n      >\n        {({ opacity, translateX }) => {\n          return (\n            <div\n              className=\"animated-grid\"\n              style={{\n                opacity: opacity,\n                transform: `translateX(${translateX}px)`\n              }}\n            >\n              {\n                <NodeGroup\n                  data={items}\n                  keyAccessor={item => item}\n                  start={(item, i) => {\n                    return {\n                      opacity: [0],\n                      translateY: [-50],\n                      timing: { delay: i * 100 }\n                    }\n                  }}\n                  enter={(item, i) => {\n                    return [\n                      {\n                        opacity: [1],\n                        timing: {\n                          duration: animationTimings.cardEnter,\n                          delay: i * 100\n                        }\n                      },\n                      {\n                        translateY: [0],\n                        timing: {\n                          duration: animationTimings.cardEnter,\n                          ease: easeElastic,\n                          delay: i * 100\n                        }\n                      }\n                    ]\n                  }}\n                  leave={(item, i) => {\n                    return {\n                      opacity: 0,\n                      translateY: -50,\n                      timing: { delay: (items.length - i) * 100 }\n                    }\n                  }}\n                >\n                  {nodes => {\n                    return (\n                      <ul className=\"grid\">\n                        {nodes.map(({ key, data, state }) => {\n                          return (\n                            <li\n                              key={key}\n                              className=\"card\"\n                              style={{\n                                opacity: state.opacity,\n                                transform: `translateY(${state.translateY}px)`\n                              }}\n                              onClick={() => removeItem(data)}\n                            >\n                              <div className=\"close-card\">&#x2715;</div>\n                              <div>{data}</div>\n                            </li>\n                          )\n                        })}\n                      </ul>\n                    )\n                  }}\n                </NodeGroup>\n              }\n            </div>\n          )\n        }}\n      </Animate>\n    )\n  }\n}\n\nexport default TransitionGrid\n"],"mappings":"AAMA","sourceRoot":""}